///////////////////////////////////////////////////////////
//  GForceDevice.cs
//  Implementation of the Class GForceDevice
//  Generated by Enterprise Architect
//  Created on:      02-2æœˆ-2021 16:07:33
//  Original author: hebin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Numerics;
using gf;


namespace GForce
{
    public class GForceDevice
    {
        public enum GForceDeviceState : int
        {
            STATE_DISCONNECTED = 0,
            STATE_CONNECTING = 1,
            STATE_CONNECTED = 2,
            STATE_DISCONNECTING = 3,
            STATE_READY = 4
        }//end DeviceState

        public struct SimpleQuaternion
        {
            public SimpleQuaternion(float w, float x, float y, float z)
            {
                this.w = w;
                this.x = x;
                this.y = y;
                this.z = z;
            }

            public float w;
            public float x;
            public float y;
            public float z;
        }

        private enum InternalState : int
        {
            STATUS_DISCONNECTED,
            STATUS_CONNECTED,
            STATUS_EMG_CONFIG_PENDING,
            STATUS_EMG_CONFIG_IN_PROGRESS,
            STATUS_EMG_CONFIG_ERROR,
            STATUS_EMG_CONFIG_FINISHED,
            STATUS_DATA_SWITCH_PENDING,
            STATUS_DATA_SWITCH_IN_PROGRESS,
            STATUS_DATA_SWITCH_ERROR,
            STATUS_DATA_SWITCH_FINISHED,
            STATUS_IDLE
        }//end InternalState


        private static Dictionary<String/*address*/, GForceDevice> deviceMapping = new Dictionary<String, GForceDevice>();

        private Device device;

        protected Vector4 quaternion = new Vector4(0, 0, 0, 1);
        protected uint gesture = 0;
        private byte[] adcData;


        protected long _lastGestureDataTime = 0;
        protected long _lastEMGDataTime = 0;
        protected long _lastQuaternionDataTime = 0;

        private InternalState internalState = InternalState.STATUS_DISCONNECTED;

        private long _connectedTime = -1;
        private long _errorTime = -1;
        private long _configResetTime = -1;

        private uint _dataSwitchNew = 0;
        private uint _dataSwitchPending = 0;
        private uint _prevDataSwitchSet = 0;

        private uint _emgSampleRateNew = 0;
        private uint _emgSampleRatePending = 0;
        private uint _prevEmgSampleRateSet = 0;

        private uint _emgChannelMapNew = 0x00;
        private uint _emgChannelMapPending = 0x00;
        private uint _prevEmgChannelMapSet = 0x00;

        private uint _emgResolutionNew = 0;
        private uint _emgResolutionPending = 0;
        private uint _prevEmgResolutionSet = 0;

        private uint _emgPacketLenNew = 0;
        private uint _emgPacketLenPending = 0;
        private uint _prevEmgPacketLenSet = 0;

        protected List<int> _prevEmgChannelsSet;


        ~GForceDevice()
        {
            device.disconnect();
            device = null;
        }

        public GForceDevice()
        {

        }


        /// <summary>
        /// Get raw device
        /// 
        /// </summary>
        /// <returns>Device</returns>
        public Device GetDevice()
        {
            return device;
        }


        public Vector4 GetQuaternion()
        {
            lock (this)
            {
                //if ((GetTimeInMilliseconds() - _lastQuaternionDataTime) < 500)
                //{
                //    return quaternion;
                //}
                //else
                //{
                //    return new(1, 0, 0, 0); // Quaternion.IdentityQuaternion();
                //}

                return quaternion;
            }
        }

        public uint GetGesture()
        {
            lock (this)
            {
                return gesture;
            }
        }


        public byte[] GetRawADC()
        {
            lock (this)
            {
                return adcData;
            }
        }


        public GForceDeviceState GetDeviceState()
        {
            GForceDeviceState state = GForceDeviceState.STATE_DISCONNECTED;

            if (device == null)
            {
                return state;
            }

            switch (device.getConnectionStatus())
            {
                case Device.ConnectionStatus.Disconnected:
                    state = GForceDeviceState.STATE_DISCONNECTED;
                    break;

                case Device.ConnectionStatus.Disconnecting:
                    state = GForceDeviceState.STATE_DISCONNECTING;
                    break;

                case Device.ConnectionStatus.Connecting:
                    state = GForceDeviceState.STATE_CONNECTING;
                    break;

                case Device.ConnectionStatus.Connected:
                    if (_configResetTime > 0 || internalState != InternalState.STATUS_IDLE)
                        state = GForceDeviceState.STATE_CONNECTED;
                    else
                        state = GForceDeviceState.STATE_READY;
                    break;
            }

            return state;
        }

        /// 
        /// <param name="device"></param>
        public void onDeviceConnected(Device device)
        {
            if (this.device != null)
            {
                return;
            }

            GForceLogger.Log("[GForceDevice] onDeviceConnected ");
            lock (deviceMapping)
            {
                if (deviceMapping.ContainsKey(device.getAddress()))
                {
                    GForceLogger.LogWarning("onDeviceConnected(): duplicated device " + device.getAddress());
                    deviceMapping.Remove(device.getAddress());
                }

                deviceMapping.Add(device.getAddress(), this);
            }

            this.device = device;
            _connectedTime = GetTimeInMilliseconds();
            internalState = InternalState.STATUS_CONNECTED;

            if (_prevDataSwitchSet != 0) _dataSwitchNew = _prevDataSwitchSet;
            _dataSwitchPending = 0;
            _prevDataSwitchSet = 0;

            if (_prevEmgSampleRateSet != 0) _emgSampleRateNew = _prevEmgSampleRateSet;
            _emgSampleRatePending = 0;
            _prevEmgSampleRateSet = 0;

            if (_prevEmgResolutionSet != 0) _emgResolutionNew = _prevEmgResolutionSet;
            _emgResolutionPending = 0;
            _prevEmgResolutionSet = 0;

            if (_prevEmgChannelMapSet != 0) _emgChannelMapNew = _prevEmgChannelMapSet;
            _emgChannelMapPending = 0x00;
            _prevEmgChannelMapSet = 0x00;

            if (_prevEmgPacketLenSet != 0) _emgPacketLenNew = _prevEmgPacketLenSet;
            _emgPacketLenPending = 0;
            _prevEmgPacketLenSet = 0;

            _prevEmgChannelsSet = null;

            _configResetTime = GetTimeInMilliseconds();
        }

        /// 
        /// <param name="device"></param>
        public void onDeviceDiscard(Device device)
        {

        }

        /// 
        /// <param name="device"></param>
        /// <param name="reason"></param>
        public void onDeviceDisconnected(Device device, int reason)
        {
            GForceLogger.Log("[GForceDevice] onDeviceDisconnected ");

            lock (deviceMapping)
            {
                deviceMapping.Remove(device.getAddress());
            }

            if (this.device != null && this.device.getAddress().Equals(device.getAddress()))
            {
                this.device = null;
                internalState = InternalState.STATUS_DISCONNECTED;
            }
        }

        public void onDeviceStatusChanged(Device device, Device.Status status)
        {
            //if (this.device != null && this.device.getAddress().Equals(device.getAddress()))
            //{
            //    if (status == Device.Status.ReCenter)
            //    {
            // 
            //    }
            //}
        }

        public void SetEMGConfig(uint sampleRate, uint channelMap, uint resolution, uint packetLen)
        {
            _emgSampleRateNew = sampleRate;
            _emgChannelMapNew = channelMap;
            _emgResolutionNew = resolution;
            _emgPacketLenNew = packetLen;

            _configResetTime = GetTimeInMilliseconds();
        }

        
        public void SetDataSwitch(uint dataSwitch)
        {
            _dataSwitchNew = dataSwitch;

            _configResetTime = GetTimeInMilliseconds();
        }


        public void TickGForce()
        {
            //GForceLogger.Log("internalState: " + internalState);

            // State machine
            switch (internalState)
            {
                case InternalState.STATUS_DISCONNECTED:
                    // Nothing
                    break;

                case InternalState.STATUS_CONNECTED:
                    if (GetTimeInMilliseconds() - _connectedTime > 2000)
                    {
                        // Disable notification
                        //RetCode res = device.enableDataNotification(0);
                        //GForceLogger.Log("Return of enableDataNotification(0): " + res);

                        internalState = InternalState.STATUS_IDLE;
                    }
                    break;

                case InternalState.STATUS_EMG_CONFIG_ERROR:
                    if (_errorTime < 0)
                    {
                        _errorTime = GetTimeInMilliseconds();
                    }
                    else if (GetTimeInMilliseconds() - _errorTime > 2000)
                    {
                        internalState = InternalState.STATUS_EMG_CONFIG_PENDING;
                    }
                    break;

                case InternalState.STATUS_EMG_CONFIG_PENDING:
                    {
                        RetCode res;

                        internalState = InternalState.STATUS_EMG_CONFIG_IN_PROGRESS;

                        // Disable notification
                        res = device.enableDataNotification(0);
                        GForceLogger.Log("Return of enableDataNotification(0): " + res);

                        // Set EMG config
                        _errorTime = -1;

                        res = device.setEmgConfig(_emgSampleRatePending, _emgChannelMapPending, _emgPacketLenPending, _emgResolutionPending, (Device device, uint resp) =>
                        {
                            GForceLogger.LogFormat("Response of setEmgConfig(...): {0}, Device: {1}", (RetCode)resp, device.getAddress());

                            GForceDevice dev = GForceDevice.GetControllerForDevice(device);

                            if (dev != null)
                            {
                                dev.EMGConfigCallback(resp);
                            }
                        });

                        GForceLogger.Log("Return of setEmgConfig(...): " + res);
                    }
                    break;

                case InternalState.STATUS_EMG_CONFIG_IN_PROGRESS:
                    // Nothing
                    break;

                case InternalState.STATUS_EMG_CONFIG_FINISHED:
                    {
                        RetCode res;

                        // Enable notification
                        res = device.enableDataNotification(1);
                        GForceLogger.Log("Return of enableDataNotification(1): " + res);

                        internalState = InternalState.STATUS_IDLE;
                    }
                    break;

                case InternalState.STATUS_DATA_SWITCH_ERROR:
                    if (_errorTime < 0)
                    {
                        _errorTime = GetTimeInMilliseconds();
                    }
                    else if (GetTimeInMilliseconds() - _errorTime > 2000)
                    {
                        internalState = InternalState.STATUS_DATA_SWITCH_PENDING;
                    }
                    break;

                case InternalState.STATUS_DATA_SWITCH_PENDING:
                    {
                        RetCode res;

                        internalState = InternalState.STATUS_DATA_SWITCH_IN_PROGRESS;

                        // Disable notification
                        res = device.enableDataNotification(0);
                        GForceLogger.Log("Return of enableDataNotification(0): " + res);

                        // Set data switch
                        _errorTime = -1;

                        res = device.setDataSwitch(_dataSwitchPending, (Device device, uint resp) =>
                        {
                            GForceLogger.LogFormat("Response of setDataSwitch({0}): {1}, Device: {2}", _dataSwitchPending, (RetCode)resp, device.getAddress());

                            GForceDevice dev = GetControllerForDevice(device);

                            if (dev != null)
                            {
                                dev.DataSwitchConfigCallback(resp);
                            }
                        });

                        GForceLogger.Log("setDataSwitch(" + _dataSwitchPending + ") returned: " + res);
                    }
                    break;

                case InternalState.STATUS_DATA_SWITCH_IN_PROGRESS:
                    // Nothing
                    break;

                case InternalState.STATUS_DATA_SWITCH_FINISHED:
                    {
                        RetCode res;

                        // Enable notification
                        res = device.enableDataNotification(1);
                        GForceLogger.Log("Return of enableDataNotification(1): " + res);

                        internalState = InternalState.STATUS_IDLE;

                    }
                    break;

                case InternalState.STATUS_IDLE:
                    if (_configResetTime > 0 && GetTimeInMilliseconds() - _configResetTime > 200)
                    {
                        if (_emgChannelMapNew != 0 &&
                            (_emgSampleRateNew != _prevEmgSampleRateSet ||
                             _emgChannelMapNew != _prevEmgChannelMapSet ||
                             _emgResolutionNew != _prevEmgResolutionSet ||
                             _emgPacketLenNew != _prevEmgPacketLenSet))
                        {
                            GForceLogger.LogFormat("_emgSampleRateNew:{0}ï¼Œ _emgChannelMapNew: {1}, _emgResolutionNew: {2}, _emgPacketLenNew: {3}",
                                _emgSampleRateNew, _emgChannelMapNew, _emgResolutionNew, _emgPacketLenNew);

                            GForceLogger.LogFormat("_prevEmgSampleRateSet:{0}ï¼Œ _prevEmgChannelMapSet: {1}, _prevEmgResolutionSet: {2}, _prevEmgPacketLenSet: {2}",
                                _prevEmgSampleRateSet, _prevEmgChannelMapSet, _prevEmgResolutionSet, _prevEmgPacketLenSet);

                            _emgSampleRatePending = _emgSampleRateNew;
                            _emgChannelMapPending = _emgChannelMapNew;
                            _emgResolutionPending = _emgResolutionNew;
                            _emgPacketLenPending = _emgPacketLenNew;

                            internalState = InternalState.STATUS_EMG_CONFIG_PENDING;
                        }

                        _configResetTime = -1;
                    }
                    else if (_dataSwitchNew != _prevDataSwitchSet)
                    {
                        GForceLogger.LogFormat("_dataSwitchNew: {0}ï¼Œ current: {1}", _dataSwitchNew, _prevDataSwitchSet);

                        _dataSwitchPending = _dataSwitchNew;

                        internalState = InternalState.STATUS_DATA_SWITCH_PENDING;
                    }

                    break;
            }
        }

        /// 
        /// <param name="emgData"></param>
        public virtual void UpdateEMGData(byte[] emgData)
        {
            GForceLogger.Log("emgData.Length: " + emgData.Length);

            lock (this)
            {
                adcData = emgData;
            }

            _lastEMGDataTime = GetTimeInMilliseconds();
        }

        /// 
        /// <param name="w"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        public virtual void UpdateOrientationData(float w, float x, float y, float z)
        {
            lock (this)
            {
                quaternion.W = w;
                quaternion.X = x;
                quaternion.Y = y;
                quaternion.Z = z;
            }

            _lastQuaternionDataTime = GetTimeInMilliseconds();
        }

        /// 
        /// <param name="gest"></param>
        public virtual void UpdateGesture(uint gesture)
        {
            lock (this)
            {
                this.gesture = gesture;
            }

            _lastGestureDataTime = GetTimeInMilliseconds();
        }


        public static List<Device> GetConnectedDevices()    // TODO: Optimize
        {
            GForceLogger.Log("deviceMapping.length: " + deviceMapping.Count);

            List<Device> connectedDevices = new List<Device>();

            lock (deviceMapping)
            {
                foreach (var dev in deviceMapping.Values)
                {
                    connectedDevices.Add(dev.GetDevice());
                }
            }

            return connectedDevices;
        }


        private static GForceDevice GetControllerForDevice(Device device)
        {
            GForceLogger.Log("deviceMapping.length: " + deviceMapping.Count);

            lock (deviceMapping)
            {
                if (deviceMapping.ContainsKey(device.getAddress()))
                {
                    return deviceMapping[device.getAddress()];
                }
                else
                {
                    return null;
                }
            }
        }

        private void EMGConfigCallback(uint resp)
        {
            _prevEmgSampleRateSet = _emgSampleRatePending;
            _prevEmgChannelMapSet = _emgChannelMapPending;
            _prevEmgResolutionSet = _emgResolutionPending;
            _prevEmgPacketLenSet = _emgPacketLenPending;

            _prevEmgChannelsSet = new List<int>();

            for (int i = 0; i < 8; i++)
            {
                if ((_prevEmgChannelMapSet & (1 << i)) != 0)
                    _prevEmgChannelsSet.Add(i);
            }


            if (internalState == InternalState.STATUS_EMG_CONFIG_IN_PROGRESS)
            {
                // Don't set status if changed elsewere
                if ((RetCode)resp == RetCode.GF_SUCCESS)
                {
                    internalState = InternalState.STATUS_EMG_CONFIG_FINISHED;
                }
                else
                {
                    internalState = InternalState.STATUS_EMG_CONFIG_ERROR;
                }
            }
        }

        private void DataSwitchConfigCallback(uint resp)
        {
            if (internalState == InternalState.STATUS_DATA_SWITCH_IN_PROGRESS)
            {
                if ((RetCode)resp == RetCode.GF_SUCCESS)
                {
                    _prevDataSwitchSet = _dataSwitchPending;
                    internalState = InternalState.STATUS_DATA_SWITCH_FINISHED;
                }
                else
                {
                    internalState = InternalState.STATUS_DATA_SWITCH_ERROR;
                }
            }
        }


        private long GetTimeInMilliseconds()
        {
            return DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond;
        }

    }//end GForceDevice

}//end namespace GForce